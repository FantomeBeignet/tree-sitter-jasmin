// the following implementation requires:
// - (even) param int CHACHA_ROUNDS;
// - inline fn __init_ref(reg u64 nonce key) -> stack u32[16] (check chacha_state.jinc)
// - inline fn __increment_counter_ref(stack u32[16] state) -> stack u32[16] (check chacha_state.jinc)
// <- comment

// used;
inline fn __copy_state_ref(stack u32[16] st) -> reg u32[16], stack u32
// <- keyword.modifier
//     ^ keyword.function
//        ^ function.definition
{
  inline int i;
  // <- keyword.modifier
  //     ^ type.builtin
  //         ^ variable
  //          ^ punctuation.delimiter
  reg u32 k15;
  // <- keyword.modifier
  reg u32[16] k;
  //  ^ type.builtin
  stack u32 s_k15;
  // <- keyword.modifier
  k15 = st[15];
  //  ^ operator
  s_k15 = k15;

  for i=0 to 15
  // <- keyword.repeat
  { k[i] = st[i]; }
  // <- punctuation.bracket

  return k, s_k15;
  // <- keyword.return
}


///////////////////////////////////////////////////////////////////////////////


// not exported; may be useful as spec;
inline fn __line_ref(reg u32[16] k, inline int a b c r) -> reg u32[16]
//                               ^ variable.parameter
//                                  ^ keyword.modifier
//                                                 ^ variable.parameter
{
  k[a] += k[b];
  //   ^ operator
  k[c] ^= k[a];
  _, _, k[c] = #ROL_32(k[c], r);
  //           ^ function.macro
  //            ^ function.macro
  return k;
}

// not exported; may be useful as spec;
inline fn __quarter_round_ref(reg u32[16] k, inline int a b c d) -> reg u32[16]
{
  k = __line_ref(k, a, b, d, 16);
  //  ^ function.call
  k = __line_ref(k, c, d, b, 12);
  k = __line_ref(k, a, b, d, 8);
  k = __line_ref(k, c, d, b, 7);
  return k;
}

// not exported; may be useful as spec;
inline fn __column_round_ref(reg u32[16] k, stack u32 k15) -> reg u32[16], stack u32
//                                                                ^ type.builtin
{
  stack u32 k14;

  k = __quarter_round_ref(k, 0, 4,  8, 12);
  k = __quarter_round_ref(k, 1, 5,  9, 13);
  k = __quarter_round_ref(k, 2, 6, 10, 14);  k14 = k[14]; k[15] = k15;
  k = __quarter_round_ref(k, 3, 7, 11, 15);  k15 = k[15]; k[14] = k14;
                             ^ number

  return k, k15;
}

// not exported; may be useful as spec;
inline fn __diagonal_round_ref(reg u32[16] k, stack u32 k15) -> reg u32[16], stack u32
{
  stack u32 k14;
                                            k14 = k[14]; k[15] = k15;
  k = __quarter_round_ref(k, 0, 5, 10, 15); k15 = k[15]; k[14] = k14;
  k = __quarter_round_ref(k, 1, 6, 11, 12);
  k = __quarter_round_ref(k, 2, 7, 8,  13);
  k = __quarter_round_ref(k, 3, 4, 9,  14);

  return k, k15;
}

// not exported; may be useful as spec;
inline fn __double_round_ref(reg u32[16] k, stack u32 k15) -> reg u32[16], stack u32
{
  k, k15 = __column_round_ref(k, k15);
  k, k15 = __diagonal_round_ref(k, k15);
  return k, k15;
}

// not exported; may be useful as spec;
inline fn __rounds_ref(reg u32[16] k, stack u32 k15) -> reg u32[16], stack u32
{
  stack u32 c;

  c = (CHACHA_ROUNDS/2);
  while
  {
    k, k15 = __double_round_ref(k, k15);
    (_,_,_,_,c) = #DEC_32(c);
  } (c > 0)

  return k, k15;
}


///////////////////////////////////////////////////////////////////////////////


// used; performs two quarter rounds, inlined 'line's;
inline fn __half_round_inline_ref(
  reg u32[16] k,
  inline int a0 b0 c0 d0
             a1 b1 c1 d1
) -> reg u32[16]
{

  //k = line(k, a, b, d, 16);
  k[a0] += k[b0];
  k[a1] += k[b1];

  k[d0] ^= k[a0];
  k[d1] ^= k[a1];

  _, _, k[d0] = #ROL_32(k[d0], 16);
  _, _, k[d1] = #ROL_32(k[d1], 16);

  //k = line(k, c, d, b, 12);
  k[c0] += k[d0];
  k[c1] += k[d1];

  k[b0] ^= k[c0];
  k[b1] ^= k[c1];

  _, _, k[b0] = #ROL_32(k[b0], 12);
  _, _, k[b1] = #ROL_32(k[b1], 12);

  //k = line(k, a, b, d, 8);
  k[a0] += k[b0];
  k[a1] += k[b1];

  k[d0] ^= k[a0];
  k[d1] ^= k[a1];

  _, _, k[d0] = #ROL_32(k[d0], 8);
  _, _, k[d1] = #ROL_32(k[d1], 8);

  //k = line(k, c, d, b, 7);
  k[c0] += k[d0];
  k[c1] += k[d1];

  k[b0] ^= k[c0];
  k[b1] ^= k[c1];

  _, _, k[b0] = #ROL_32(k[b0], 7);
  _, _, k[b1] = #ROL_32(k[b1], 7);

  return k;
}


// used;
inline fn __double_round_inline_ref(reg u32[16] k, stack u32 k14 k15) -> reg u32[16], stack u32, stack u32
{
  k[14] = k14;

  k = __half_round_inline_ref(k, 0, 4, 8, 12,
                                 2, 6, 10, 14);
  k14 = k[14];
  k[15] = k15;

  k = __half_round_inline_ref(k, 1, 5, 9, 13,
                                 3, 7, 11, 15);

  k = __half_round_inline_ref(k, 1, 6, 11, 12,
                                 0, 5, 10, 15);

  k15 = k[15];
  k[14] = k14;

  k = __half_round_inline_ref(k, 2, 7, 8, 13,
                                 3, 4, 9, 14);

  k14 = k[14];

  return k, k14, k15;
}


// used;
inline fn __rounds_inline_ref(reg u32[16] k, stack u32 k15) -> reg u32[16], stack u32
{
  stack u32 s_c k14;
  reg u32 c;

  k14 = k[14];
  c = (CHACHA_ROUNDS/2);
  //   ^ variable

  while
  { s_c = c;
    
    k, k14, k15 = __double_round_inline_ref(k, k14, k15);

    c = s_c;
    (_,_,_,_,c) = #DEC_32(c);
  } (c > 0)

  k[14] = k14;
  return k, k15;
}


// used;
inline fn __sum_states_ref(reg u32[16] k, stack u32 k15, stack u32[16] st) -> reg u32[16], stack u32
{
  inline int i;
  stack u32 k14;
  reg u32 t;

  for i=0 to 15
  { k[i] += st[i]; }

  k14 = k[14];

  t = k15;
  t += st[15];
  k15 = t;

  k[14] = k14;

  return k, k15;
}

inline fn __chacha_xor_ref(reg u64 output input len nonce key)
{
  stack u64 s_output s_input s_len;
  stack u32[16] st;
  reg u32[16] k;  // the full state is in k[0..14] and k15;
  stack u32 k15;

  s_output = output;
  s_input = input;
  s_len = len;

  st = __init_ref(nonce, key);

  while {len = s_len;} (len >= 64)
  { k, k15 = __copy_state_ref(st);
    k, k15 = __rounds_inline_ref(k, k15);
    s_output, s_input, s_len = __sum_states_store_xor_ref(s_output, s_input, s_len, k, k15, st);
    st = __increment_counter_ref(st);
  }

  if(len > 0)
  { k, k15 = __copy_state_ref(st);
    k, k15 = __rounds_inline_ref(k, k15);
    k, k15 = __sum_states_ref(k, k15, st);
    __store_xor_last_ref(s_output, s_input, s_len, k, k15);
  }
}


inline fn __chacha_ref(reg u64 output len nonce key)
{
  stack u64 s_output s_len;
  stack u32[16] st;
  reg u32[16] k;  // the full state is in k[0..14] and k15;
  stack u32 k15;

  s_output = output;
  s_len = len;

  st = __init_ref(nonce, key);

  while {len = s_len;} (len >= 64)
  { k, k15 = __copy_state_ref(st);
    k, k15 = __rounds_inline_ref(k, k15);
    s_output, s_len = __sum_states_store_ref(s_output, s_len, k, k15, st);
    st = __increment_counter_ref(st);
  }

  if(len > 0)
  { k, k15 = __copy_state_ref(st);
    k, k15 = __rounds_inline_ref(k, k15);
    k, k15 = __sum_states_ref(k, k15, st);
    __store_last_ref(s_output, s_len, k, k15);
  }
}

// nonce : 8 bytes
// key : 32 bytes
// counter : 8 bytes (starts at 0)
inline fn __init_ref(reg u64 nonce key) -> stack u32[16]
{
  inline int i;
  stack u32[16] st;
  reg u32 t;

  st[0] = 0x61707865;
  st[1] = 0x3320646e;
  st[2] = 0x79622d32;
  st[3] = 0x6b206574;
  //      ^ number

  // reads 8 u32 from pointer key
  for i=0 to 8
  { t = [:u32 key + 4*i];
  //     ^ type.builtin
    st[4+i] = t; }

  // 64-bit counter (same as st[12] = 0; st[13] = 0;)
  st[:u64 6] = 0;

  // reads 2 u32 from pointer nonce
  for i=0 to 2
  { t = [:u32 nonce + 4*i];
    st[14+i] = t; }

  return st;
}

// increments 64-bit counter
inline fn __increment_counter_ref(stack u32[16] st) -> stack u32[16]
{
  reg u64 t;

  t = st[:u64 6];
  t += 1;
  st[:u64 6] = t;

  return st;
}

///////////////////////////////////////////////////////////////////////////////
// store 'xor' ////////////////////////////////////////////////////////////////

inline fn __update_ptr_xor_ref(reg u64 output input len, inline int n) -> reg u64, reg u64, reg u64
{
  output += n;
  input += n;
  len -= n;
  return output, input, len;
}

// 64 bytes
inline fn __store_xor_ref(stack u64 s_output s_input s_len, reg u32[16] k, stack u32 k15) -> stack u64, stack u64, stack u64
{
  inline int i;
  reg u64[8] kk;
  reg u64 output input aux len;

  // i = 0 : 1 dead
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;
  input = s_input;
  kk[0] ^= [:u64 input + 8*0];

  // i = 1 : 2 dead
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  kk[1] ^= [:u64 input + 8*1];
  output = s_output;
  [:u64 output + 8*0] = kk[0];

  for i=2 to 8
  {
    kk[i] = (64u)((i == 7) ? k15 : k[2*i+1]);
    //                     ^ keyword.conditional.ternary
    //                           ^ keyword.conditional.ternary
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    kk[i] ^= [:u64 input + 8*i];
    [:u64 output + 8*(i-1)] = kk[i-1];
  }

  [:u64 output + 8*7] = kk[7];

  len = s_len;

  output, input, len = __update_ptr_xor_ref(output, input, len, 64);

  s_output = output;
  s_input = input;
  s_len = len;

  return s_output, s_input, s_len;
}

inline fn __sum_states_store_xor_ref(
  stack u64 s_output s_input s_len,
  reg u32[16] k, stack u32 k15,
  stack u32[16] st
) -> stack u64, stack u64, stack u64
{
  inline int i;
  reg u64[8] kk;
  reg u64 output input aux len;

  // store                                        // sum states
  // i = 0 : 1 dead
                                                  k[1] += st[1];
                                                  k[0] += st[0];
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;
  input = s_input;
  kk[0] ^= [:u64 input + 8*0];

  // i = 1 : 2 dead
                                                  k[3] += st[3];
                                                  k[2] += st[2];
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  kk[1] ^= [:u64 input + 8*1];
  output = s_output;
  [:u64 output + 8*0] = kk[0];

  for i=2 to 8
  {
                                                  if (2*i+1 == 15) { k[2*i+1] = k15; }
                                                  k[2*i+1] += st[2*i+1];
                                                  k[2*i] += st[2*i];
    kk[i] = (64u)(k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    kk[i] ^= [:u64 input + 8*i];
    [:u64 output + 8*(i-1)] = kk[i-1];
  }

  [:u64 output + 8*7] = kk[7];

  len = s_len;

  output, input, len = __update_ptr_xor_ref(output, input, len, 64);

  s_output = output;
  s_input = input;
  s_len = len;

  return s_output, s_input, s_len;
}

inline fn __store_xor_last_ref(stack u64 s_output s_input s_len, reg u32[16] k, stack u32 k15)
{
  inline int i;
  reg u64 t j output input len len8;
  reg u32 u;
  stack u32[16] s_k;
  reg u8 pi;

  // copy k to stack
  for i=0 to 15
  { s_k[i] = k[i]; }
  u = k15;
  s_k[15] = u;

  output = s_output;
  input = s_input;
  len = s_len;

  // u64 at a time
  len8 = len;
  len8 >>= 3;
  j = 0;
  while(j < len8)
  {
    t = [:u64 input + 8*j];
    t ^= s_k[:u64 (int)j];
    //             ^ type.builtin
    [:u64 output + 8*j] = t;
    j += 1;
  }
  j <<= 3;

  // u8 at a time
  while(j < len)
  {
    pi = [:u8 input + j];
    pi ^= s_k[:u8 (int)j];
    [:u8 output + j] = pi;
    j += 1;
  }
}

///////////////////////////////////////////////////////////////////////////////
// store //////////////////////////////////////////////////////////////////////

inline fn __update_ptr_ref(reg u64 output len, inline int n) -> reg u64, reg u64
{
  output += n;
  len -= n;
  return output, len;
}

// 64 bytes
inline fn __store_ref(stack u64 s_output s_len, reg u32[16] k, stack u32 k15) -> stack u64, stack u64
{
  inline int i;
  reg u64[8] kk;
  reg u64 output aux len;

  // i = 0 : 1 dead
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;

  // i = 1 : 2 dead
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  output = s_output;
  [:u64 output + 8*0] = kk[0];

  for i=2 to 8
  {
    kk[i] = (64u)((i == 7) ? k15 : k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    [:u64 output + 8*(i-1)] = kk[i-1];
  }

  [:u64 output + 8*7] = kk[7];

  len = s_len;

  output, len = __update_ptr_ref(output, len, 64);

  s_output = output;
  s_len = len;

  return s_output, s_len;
}

inline fn __sum_states_store_ref(
  stack u64 s_output s_len,
  reg u32[16] k, stack u32 k15,
  stack u32[16] st
) -> stack u64, stack u64
{
  inline int i;
  reg u64[8] kk;
  reg u64 output aux len;

  // store                                        // sum states
  // i = 0 : 1 dead
                                                  k[1] += st[1];
                                                  k[0] += st[0];
  kk[0] = (64u) k[1];
  kk[0] <<= 32;
  aux = (64u)k[0];
  kk[0] ^= aux;

  // i = 1 : 2 dead
                                                  k[3] += st[3];
                                                  k[2] += st[2];
  kk[1] = (64u) k[3];
  kk[1] <<= 32;
  aux = (64u)k[2];
  kk[1] ^= aux;
  output = s_output;
  [:u64 output + 8*0] = kk[0];

  for i=2 to 8
  {
                                                  if (2*i+1 == 15) { k[2*i+1] = k15; }
                                                  k[2*i+1] += st[2*i+1];
                                                  k[2*i] += st[2*i];
    kk[i] = (64u)(k[2*i+1]);
    kk[i] <<= 32;
    aux = (64u)k[2*i];
    kk[i] ^= aux;
    [:u64 output + 8*(i-1)] = kk[i-1];
  }

  [:u64 output + 8*7] = kk[7];

  len = s_len;

  output, len = __update_ptr_ref(output, len, 64);

  s_output = output;
  s_len = len;

  return s_output, s_len;
}

inline fn __store_last_ref(stack u64 s_output s_len, reg u32[16] k, stack u32 k15)
{
  inline int i;
  reg u64 t j output len len8;
  reg u32 u;
  stack u32[16] s_k;
  reg u8 pi;

  // copy k to stack
  for i=0 to 15
  { s_k[i] = k[i]; }
  u = k15;
  s_k[15] = u;

  output = s_output;
  len = s_len;

  // u64 at a time
  len8 = len;
  len8 >>= 3;
  j = 0;
  while(j < len8)
  {
    t = s_k[:u64 (int)j];
    [:u64 output + 8*j] = t;
    j += 1;
  }
  j <<= 3;

  // u8 at a time
  while(j < len)
  // <- keyword.repeat
  {
    pi = s_k[:u8 (int)j];
    [:u8 output + j] = pi;
    j += 1;
  }
}

